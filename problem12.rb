require 'ruby-prof'
load 'problem03.rb'
# Highly divisible triangular number
# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

def triangle_numbers(n)
  n * (n + 1) / 2
end

def divisors(n)
  1.upto(n).select do |i|
    (n % i).zero?
  end.size
end

def more_than_n_divisors(n)
  i = 0
  max = 0
  loop do
    triangle = triangle_numbers(i)
    primes = primes(triangle)
    # puts [primes.size, triangle]
    if primes.size ** 2 > n
      triangle_divisors = divisors(triangle)
      if triangle_divisors > max
        max = triangle_divisors
        puts
        puts [max, triangle, i].inspect
      end
      return triangle if triangle_divisors > n
    end
    # print '.'
    i += 1
  end
end

# RubyProf.measure_mode = RubyProf::WALL_TIME
# RubyProf.measure_mode = RubyProf::PROCESS_TIME
RubyProf.measure_mode = RubyProf::CPU_TIME
# RubyProf.measure_mode = RubyProf::ALLOCATIONS
# RubyProf.measure_mode = RubyProf::MEMORY
# RubyProf.measure_mode = RubyProf::GC_TIME
# RubyProf.measure_mode = RubyProf::GC_RUNS

# profile the code
result = RubyProf.profile do
  begin
    puts more_than_n_divisors(200)
  rescue Exception => e
  end
end

# print a flat profile to text
printer = RubyProf::GraphHtmlPrinter.new(result)
# printer = RubyProf::CallStackPrinter.new(result)
printer.print(STDOUT)
